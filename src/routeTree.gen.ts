/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PrivacyImport } from './routes/privacy'
import { Route as ContactImport } from './routes/contact'
import { Route as AvatarImport } from './routes/avatar'
import { Route as SplatImport } from './routes/$splat'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const PrivacyRoute = PrivacyImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => rootRoute,
} as any)

const ContactRoute = ContactImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRoute,
} as any)

const AvatarRoute = AvatarImport.update({
  id: '/avatar',
  path: '/avatar',
  getParentRoute: () => rootRoute,
} as any)

const SplatRoute = SplatImport.update({
  id: '/$splat',
  path: '/$splat',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/$splat': {
      id: '/$splat'
      path: '/$splat'
      fullPath: '/$splat'
      preLoaderRoute: typeof SplatImport
      parentRoute: typeof rootRoute
    }
    '/avatar': {
      id: '/avatar'
      path: '/avatar'
      fullPath: '/avatar'
      preLoaderRoute: typeof AvatarImport
      parentRoute: typeof rootRoute
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactImport
      parentRoute: typeof rootRoute
    }
    '/privacy': {
      id: '/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$splat': typeof SplatRoute
  '/avatar': typeof AvatarRoute
  '/contact': typeof ContactRoute
  '/privacy': typeof PrivacyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$splat': typeof SplatRoute
  '/avatar': typeof AvatarRoute
  '/contact': typeof ContactRoute
  '/privacy': typeof PrivacyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/$splat': typeof SplatRoute
  '/avatar': typeof AvatarRoute
  '/contact': typeof ContactRoute
  '/privacy': typeof PrivacyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/$splat' | '/avatar' | '/contact' | '/privacy'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/$splat' | '/avatar' | '/contact' | '/privacy'
  id: '__root__' | '/' | '/$splat' | '/avatar' | '/contact' | '/privacy'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SplatRoute: typeof SplatRoute
  AvatarRoute: typeof AvatarRoute
  ContactRoute: typeof ContactRoute
  PrivacyRoute: typeof PrivacyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SplatRoute: SplatRoute,
  AvatarRoute: AvatarRoute,
  ContactRoute: ContactRoute,
  PrivacyRoute: PrivacyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/$splat",
        "/avatar",
        "/contact",
        "/privacy"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/$splat": {
      "filePath": "$splat.tsx"
    },
    "/avatar": {
      "filePath": "avatar.tsx"
    },
    "/contact": {
      "filePath": "contact.tsx"
    },
    "/privacy": {
      "filePath": "privacy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
